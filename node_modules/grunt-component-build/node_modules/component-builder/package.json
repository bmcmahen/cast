{
  "name": "component-builder",
  "version": "0.6.3",
  "description": "Component build tool",
  "keywords": [
    "component",
    "build"
  ],
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.caa"
  },
  "dependencies": {
    "component-require": "0.2.0",
    "batch": "0.2.1",
    "mkdirp": "0.3.4",
    "debug": "*",
    "better-assert": "~0.1.0",
    "fs-extra": "~0.5.0"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "ejs": "~0.8.3"
  },
  "main": "index",
  "readme": "# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#conf\n\n  The component.json contents.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a \n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Add the given dependency lookup `path`.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## License \n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "_id": "component-builder@0.6.3",
  "_from": "component-builder@latest"
}
