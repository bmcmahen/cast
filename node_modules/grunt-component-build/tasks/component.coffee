Builder   = require('component-builder')
fs        = require('fs')
path      = require('path')
template  = fs.readFileSync( __dirname + '/../lib/require.tmpl').toString()

module.exports = (grunt) ->
  grunt.registerMultiTask 'component', 'component-build for grunt', ->
    name = @target
    output = path.resolve(@data.output)
    done = @async()
    builder = new Builder( path.resolve(path.dirname(@data.config)) )

    # Enable source URL support into the built files. You'll 
    # probably want to make sure this is turned off in production
    if @data.sourceUrls is true then builder.addSourceURLs()

    # Where to output the final file
    builder.copyAssetsTo(output)

    # Ignore component parts. This allows you to ignore
    # types from a component, like scripts or styles. Use this
    # if you don't want styles, scripts or files from a third-party
    # component included in the build
    if @data.ignore
      for key, type of @data.ignore
        builder.ignore(key, type)
  
    # The component config
    config = require( path.resolve(@data.base, 'component.json') )

    # Add in extra scripts during the build since Component makes
    # us define each and every file in our component to build it.
    # Since this isn't supported by the default component build, you
    # probably shouldn't use globbed files in your component.json in public 
    # components.
    config.scripts = grunt.file.expand( config.scripts or [] )
    config.templates = grunt.file.expand( config.templates or [] )

    # Add component lookup paths from the component.json files
    if config.paths then builder.addLookup config.paths

    # Add prefix url options from the grunt file config. This 
    # isn't part of the component.json settings.
    if @data.prefix then builder.prefixUrls @data.prefix

    # Sets the builder into dev mode. This will
    # bundle any devDependencies you have in your component.json
    # You'll probably want this set to true for running tests
    if @data.dev then builder.development()

    # Set the config on the builder. We've modified
    # the original config from the file and this will
    # override settings during the build
    builder.conf = config

    # Configure hook. This allows you to add builder.js 
    # plugins to allow for adding extra language support
    # 
    #   configure: (builder) -> 
    #     builder.use(coffeePlugin)
    #     builder.use(stringPlugin)
    # 
    if @data.configure then @data.configure.call(this, builder) 

    # This is where we tell the build to compile all of the components
    # and create the output files. 
    builder.build (err, obj) =>

      if err
        grunt.log.error err.message
        grunt.fatal err.message

      if @data.styles isnt false
        cssFile = path.join output, "#{name}.css"
        grunt.file.write cssFile, obj.css

      if @data.scripts isnt false
        jsFile = path.join output, "#{name}.js"
        if @data.standalone 
          obj.name = if typeof @data.standalone is 'string' then @data.standalone else config.name
          obj.config = config
          string = grunt.template.process template, { data: obj }
          grunt.file.write jsFile, string
        else
          grunt.file.write jsFile, obj.require + obj.js

      done()